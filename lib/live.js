// Generated by CoffeeScript 1.6.3
(function() {
  var LiveJS, elem, log, onload, serverBase, sioScript, socketioSrc;

  log = console.log;

  LiveJS = (function() {
    var self;

    self = {};

    function LiveJS(opts) {
      var script, _base, _i, _len, _ref;
      this.opts = opts;
      self = this;
      this.opts.pattern = new RegExp(this.opts.pattern);
      if ((_base = this.opts).serverBase == null) {
        _base.serverBase = serverBase;
      }
      if ('string' === typeof this.opts.namespaces) {
        this.opts.namespaces = this.opts.namespaces.split(',');
      }
      log('Using settings: ', this.opts);
      this.scripts = {};
      this.objects = [];
      _ref = document.getElementsByTagName('script');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        script = _ref[_i];
        if (!this.opts.pattern.test(script.src)) {
          continue;
        }
        this.scripts[script.src] = script;
      }
      log('Collected Scripts:', this.scripts);
      this.socket = io.connect(this.opts.serverBase);
      this.socket.on('update', this.updateHandler);
    }

    LiveJS.prototype.updateHandler = function(data) {
      var className, newPrototype, ns, obj, objName, prop, propName, _i, _len, _ref, _results;
      console.log('UPDATE', data.date, data.file);
      eval(data.code);
      _ref = self.opts.namespaces;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ns = _ref[_i];
        console.log('Patching NS', ns);
        _results.push((function() {
          var _ref1, _results1;
          _ref1 = window[ns];
          _results1 = [];
          for (objName in _ref1) {
            obj = _ref1[objName];
            if ('object' !== typeof obj) {
              continue;
            }
            console.log('Patching Object', ns, '.', objName);
            className = obj.__proto__.constructor.name;
            newPrototype = window[ns][className].prototype;
            _results1.push((function() {
              var _results2;
              _results2 = [];
              for (propName in newPrototype) {
                prop = newPrototype[propName];
                if ('function' !== typeof prop) {
                  continue;
                }
                _results2.push(obj[propName] = prop);
              }
              return _results2;
            })());
          }
          return _results1;
        })());
      }
      return _results;
    };

    LiveJS.prototype.registerObject = function(obj) {
      return this.objects.push(obj);
    };

    LiveJS.prototype.reload = function() {
      var newScript, script, src, _ref;
      _ref = this.scripts;
      for (src in _ref) {
        script = _ref[src];
        newScript = document.createElement('script');
        newScript.src = src;
        document.body.appendChild(newScript);
        this.scripts[src] = newScript;
      }
      this.patch();
      return null;
    };

    LiveJS.prototype.patch = function() {
      var className, func, name, obj, _i, _len, _ref, _results;
      _ref = this.objects;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        className = obj.__proto__.constructor.name;
        _results.push((function() {
          var _ref1, _results1;
          _ref1 = window[className].prototype;
          _results1 = [];
          for (name in _ref1) {
            func = _ref1[name];
            if ('function' !== typeof func) {
              continue;
            }
            _results1.push(obj[name] = func);
          }
          return _results1;
        })());
      }
      return _results;
    };

    return LiveJS;

  })();

  window.LiveJS = LiveJS;

  elem = document.getElementById('live-js');

  serverBase = '';

  onload = function() {
    var ljs, settings;
    settings = JSON.parse(elem.attributes['data-settings'].value);
    return ljs = new LiveJS(settings);
  };

  if (elem) {
    serverBase = elem.src.replace('/live.js', '');
    socketioSrc = serverBase + '/socket.io/socket.io.js';
    sioScript = document.createElement('script');
    sioScript.src = socketioSrc;
    document.body.appendChild(sioScript);
    if (window.addEventListener) {
      window.addEventListener('load', onload, false);
    }
  }

}).call(this);
